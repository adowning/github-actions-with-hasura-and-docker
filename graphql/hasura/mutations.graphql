




mutation CreateUser($email: String!, $password: String!) {
  insert_users(objects: { email: $email, password: $password }) {
    affected_rows
    returning {
      id
      email
      created_at
    }
  }
}
mutation UpdateUser($id: uuid!, $activeTimesheetId: uuid) {
  update_users_by_pk(
    pk_columns: { id: $id }
    _set: { activeTimesheetId: $activeTimesheetId }
  ) {
    id
    activeTimesheetId
  }
}

mutation DeleteUserById($id: uuid!) {
  delete_users(where: { id: { _eq: $id } }) {
    affected_rows
    returning {
      email
      created_at
      updated_at
      id
    }
  }
}


mutation CreateTimesheet($userId: uuid!) {
  insert_timesheets(objects: { userId: $userId }) {
    affected_rows
    returning {
      user {
        id
        email
      }
      start
      id
    }
  }
}

mutation UpdateTimesheet($id: uuid!, $end: timestamptz, $start: timestamptz) {
  update_timesheets_by_pk(pk_columns: { id: $id }, _set: { end: $end }) {
    user {
      id
      email
    }
    start
    end
    id
  }
}
# mutation UpdateTimesheet($id: uuid!, $end: timestamptz, $start: timestamptz) {
#   update_timesheets(
#     where: { id: { _eq: $id } }
#     _set: { end: $end, start: $start }
#   ) {
#     affected_rows
#     returning {
#       id
#       end
#       start
#       user {
#         id
#         email
#         isClockedIn
#       }
#       userId
#     }
#   }
# }
mutation DeleteTimesheetById($id: uuid!) {
  delete_timesheets(where: { id: { _eq: $id } }) {
    affected_rows
    returning {
      id
      created_at
      updated_at
      user {
        id
        email
      }
    }
  }
}
